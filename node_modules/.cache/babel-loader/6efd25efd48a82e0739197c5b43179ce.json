{"ast":null,"code":"var _jsxFileName = \"/Users/hannafellwing/Documents/IA_A\\u030AR_TVA\\u030A/Fletplattfrom/projekt/react-project/src/App.js\";\nimport React, { Component } from 'react';\nimport './index.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      facts: [],\n      error: null\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          facts = _this$state.facts,\n          error = _this$state.error;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Random User\"), \"// Display a message if we encounter an error\", error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, error.message) : null, \"// Here's our data check\", !isLoading ? facts.map(fact => {\n      const id = fact.id,\n            text = fact.text,\n            name = fact.name;\n      return React.createElement(\"div\", {\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Name: \", name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"Email Address: \", text), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n    }) // If there is a delay in data, let's let the user know it's loading\n    : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n  fetchUsers() {\n    // Where we're fetching data from\n    fetch(\"https://cat-fact.herokuapp.com/facts\") // We get the API response and receive data in JSON format...\n    .then(response => response.json()) // ...then we update the users state\n    .then(data => this.setState({\n      facts: data,\n      isLoading: false\n    })) // Catch any errors we hit and update the app\n    .catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/hannafellwing/Documents/IA_ÅR_TVÅ/Fletplattfrom/projekt/react-project/src/App.js"],"names":["React","Component","App","state","isLoading","facts","error","render","message","map","fact","id","text","name","fetchUsers","fetch","then","response","json","data","setState","catch","componentDidMount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACC,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCE,KADgC,GACxB;AACNC,MAAAA,SAAS,EAAE,IADL;AAENC,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,KAAK,EAAE;AAHD,KADwB;AAAA;;AAQhCC,EAAAA,MAAM,GAAG;AAAA,wBAC6B,KAAKJ,KADlC;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,KADZ,eACYA,KADZ;AAAA,UACmBC,KADnB,eACmBA,KADnB;AAEP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,mDAGGA,KAAK,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACE,OAAV,CAAH,GAA4B,IAHpC,8BAKG,CAACJ,SAAD,GACCC,KAAK,CAACI,GAAN,CAAUC,IAAI,IAAI;AAAA,YACRC,EADQ,GACYD,IADZ,CACRC,EADQ;AAAA,YACJC,IADI,GACYF,IADZ,CACJE,IADI;AAAA,YACEC,IADF,GACYH,IADZ,CACEG,IADF;AAEhB,aACE;AAAK,QAAA,GAAG,EAAEF,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAUE,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAmBD,IAAnB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAOD,KATD,CADD,CAWD;AAXC,MAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBJ,CADF;AAuBD;;AAEHE,EAAAA,UAAU,GAAG;AACX;AACAC,IAAAA,KAAK,wCAAL,CACE;AADF,KAEGC,IAFH,CAEQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFpB,EAGE;AAHF,KAIGF,IAJH,CAIQG,IAAI,IACR,KAAKC,QAAL,CAAc;AACZf,MAAAA,KAAK,EAAEc,IADK;AAEZf,MAAAA,SAAS,EAAE;AAFC,KAAd,CALJ,EAUE;AAVF,KAWGiB,KAXH,CAWSf,KAAK,IAAI,KAAKc,QAAL,CAAc;AAAEd,MAAAA,KAAF;AAASF,MAAAA,SAAS,EAAE;AAApB,KAAd,CAXlB;AAYD;;AAEDkB,EAAAA,iBAAiB,GAAG;AAClB,SAAKR,UAAL;AACD;;AArDiC;;AA2DlC,eAAeZ,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './index.css';\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    facts: [],\n    error: null\n  }\n\n\n  render() {\n    const { isLoading, facts, error } = this.state;\n    return (\n      <React.Fragment>\n        <h1>Random User</h1>\n        // Display a message if we encounter an error\n        {error ? <p>{error.message}</p> : null}\n        // Here's our data check\n        {!isLoading ? (\n          facts.map(fact => {\n            const { id, text, name, } = fact;\n            return (\n              <div key={id}>\n                <p>Name: {name}</p>\n                <p>Email Address: {text}</p>\n                <hr />\n              </div>\n            );\n          })\n        // If there is a delay in data, let's let the user know it's loading\n        ) : (\n          <h3>Loading...</h3>\n        )}\n      </React.Fragment>\n    );\n  }\n\nfetchUsers() {\n  // Where we're fetching data from\n  fetch(`https://cat-fact.herokuapp.com/facts`)\n    // We get the API response and receive data in JSON format...\n    .then(response => response.json())\n    // ...then we update the users state\n    .then(data =>\n      this.setState({\n        facts: data,\n        isLoading: false,\n      })\n    )\n    // Catch any errors we hit and update the app\n    .catch(error => this.setState({ error, isLoading: false }));\n}\n\ncomponentDidMount() {\n  this.fetchUsers();\n}\n\n}\n\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}